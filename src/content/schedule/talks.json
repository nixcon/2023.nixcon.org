[
  {
    "code": "TPLSLT",
    "speakers": [],
    "title": "NixOS Governance conversation (2nd session)",
    "submission_type": {
      "en": "Workshop/Training - Select this if you are planning on running a training for attendees"
    },
    "submission_type_id": 3115,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "2nd session",
    "description": "",
    "duration": 60,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2421,
      "room": {
        "en": "Workshop room (Room 24)"
      },
      "start": "2023-09-09T13:30:00+02:00",
      "end": "2023-09-09T14:30:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "AH7JSC",
    "speakers": [],
    "title": "NixOS Governance conversation (hackday session)",
    "submission_type": {
      "en": "Workshop/Training - Select this if you are planning on running a training for attendees"
    },
    "submission_type_id": 3115,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Hackday governance session",
    "description": "",
    "duration": 90,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2421,
      "room": {
        "en": "Workshop room (Room 24)"
      },
      "start": "2023-09-10T08:30:00+02:00",
      "end": "2023-09-10T10:00:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "L3QVWC",
    "speakers": [
      {
        "code": "CH7HAF",
        "name": "Eelco Dolstra",
        "biography": "Eelco Dolstra started the Nix project as a PhD student at Utrecht University. He currently works at Determinate Systems.",
        "avatar": "https://talks.nixcon.org/media/avatars/2e325a12c8976f6a704cd52048e68edd_pnciKCY.jpg"
      }
    ],
    "title": "Flake schemas",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Flakes are a format for distributing Nix-based assets such as Nix packages, development shells, CI jobs and NixOS modules. The flake specification doesn't impose any restrictions on the contents (\"outputs\") of a flake, and these can be arbitrary Nix values. While this makes flakes very flexible, it means that there is no generic way to find out what a flake provides, or to check its correctness. To work around this, tools such as `nix flake show` and `nix flake check` have built-in support for a fixed set of flake output types such as `packages` and `devShells`. Unfortunately, this set cannot be extended by users to handle new flake output types.\r\n\r\nIn this talk, I propose *flake schemas*, which are essentially Nix functions that enumerate the contents of a flake output, including documentation, checks and options. Flake schemas do not impose a type system on flake outputs - it is entirely up to the schema function how it checks the flake output. Flake schemas allow us to remove all output-specific code from commands like `nix flake {show, check, search}`, making it easier for developers to introduce new output\r\ntypes.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T10:40:00+02:00",
      "end": "2023-09-08T11:05:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "8BJU9K",
    "speakers": [
      {
        "code": "D7JTGH",
        "name": "Yorick van Pelt",
        "biography": "Yorick is a part-time software engineer at Tweag.\r\n\r\nHe installed NixOS in 2014 and can never go back. This year, he's been working on improving the Nix interpreter.\r\n\r\nWhen he's not at Tweag, he also works as a generative AI consultant: ask him anything about LLMs.",
        "avatar": "https://talks.nixcon.org/media/avatars/2123601-2-medium-square_PxV5mYr.jpg"
      }
    ],
    "title": "Using Nix from Python, using Python from Nix",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Interesting things you can do using the proposed C API",
    "description": "Nix plugins have been a possibility for years, but haven't caught on.\r\nI'll talk about the proposed new C API and what you can do with it.\r\n\r\n- Using Nix from your own tooling without wrapping the CLI\r\n- Writing Nix plugins",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T17:05:00+02:00",
      "end": "2023-09-08T17:30:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "UPNSQD",
    "speakers": [
      {
        "code": "PZGNJF",
        "name": "talyz",
        "biography": "Sysadmin at XLN Audio. Maintainer of Impermanence and a few NixOS modules, such as Discourse and Keycloak.",
        "avatar": "https://talks.nixcon.org/media/avatars/xln_katt_qMqo3ac.jpeg"
      }
    ],
    "title": "Impermanence",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "The [Impermanence](https://github.com/nix-community/impermanence) project aims to make it easy to build systems where the root storage is erased on every boot.",
    "description": "In this talk, I'll go into why and how you would set up a system with ephemeral root storage and how Impermanence can help you manage the state you want to keep between reboots.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T16:15:00+02:00",
      "end": "2023-09-08T16:40:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "KAYMMA",
    "speakers": [
      {
        "code": "YGSVC7",
        "name": "Luc Perkins",
        "biography": "Luc is a Nix advocate at Determinate Systems",
        "avatar": "https://talks.nixcon.org/media/avatars/af481d7274821037b1a807995b4a6598_86Kdhcb.jpg"
      }
    ],
    "title": "Nuenv: an experimental derivation builder for Nix",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Nuenv is an alternative builder for Nix derivations that uses Nushell rather than Bash. It offers enhanced expressiveness and type safety to Nix.",
    "description": "While Bash is a tried-and-true and highly well-known quantity, it's not particularly expressive and it has known \"footguns\" surrounding things like string parsing. Nushell is a recent entry into the world of shells. It's written in Rust and it offers robust data types and safety guarantees that have a lot to potentially offer to Nix. In this talk, I'll teach you not just about Nushell, how I built it, and how it works, but also about the realisation process itself.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T11:25:00+02:00",
      "end": "2023-09-09T11:50:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "DS3REV",
    "speakers": [],
    "title": "NixCon 2023 Opening Ceremony",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Opening ceremony for day 2!",
    "description": "",
    "duration": 10,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T10:00:00+02:00",
      "end": "2023-09-09T10:14:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "EUYNYF",
    "speakers": [
      {
        "code": "WNKTLV",
        "name": "Ron Efroni",
        "biography": null,
        "avatar": "https://talks.nixcon.org/media/avatars/1516962377063_1_HPUZpkL.jpg"
      }
    ],
    "title": "NixCon 2023 Opening Ceremony",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Opening notes, shoutout to sponsors, running through the agenda, thanking everyone, kicking off, rules/guidelines",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T10:00:00+02:00",
      "end": "2023-09-08T10:10:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "BABWGG",
    "speakers": [
      {
        "code": "F9KJYR",
        "name": "Thomas Bereknyei",
        "biography": null,
        "avatar": null
      }
    ],
    "title": "Dynamic Derivations: what and why",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "In this quick talk, tomberek will introduce an upcoming experimental feature that has been in development for several years: dynamic derivations (RFC92). The talk will describe the motivation, the current status, implementation details, and a teaser of user-facing value they provide.\r\n\r\nReferences: \r\n\r\n- https://github.com/NixOS/rfcs/blob/master/rfcs/0092-plan-dynamism.md\r\n- https://github.com/NixOS/rfcs/pull/92\r\n- https://github.com/NixOS/nix/issues/6316",
    "description": "",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T14:15:00+02:00",
      "end": "2023-09-09T14:20:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "NRSXHT",
    "speakers": [
      {
        "code": "WNKTLV",
        "name": "Ron Efroni",
        "biography": null,
        "avatar": "https://talks.nixcon.org/media/avatars/1516962377063_1_HPUZpkL.jpg"
      }
    ],
    "title": "NixCon 2023 Closing Ceremony",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Closing, thank yous, sponsors, what's next, anything else",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T18:20:00+02:00",
      "end": "2023-09-09T18:45:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "RNTYJF",
    "speakers": [
      {
        "code": "LUS8EB",
        "name": "Astro",
        "biography": "microvm.nix, deadnix, nix-openwrt-imagebuilder",
        "avatar": "https://talks.nixcon.org/media/avatars/12923_uuprQcB.png"
      }
    ],
    "title": "microvm.nix",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "microvm.nix builds NixOS for a few virtual machine managers in a few different use-cases",
    "description": "Full virtualization suffers from overhead and performance degradation due to software emulation of real hardware. MicroVMs are optimized by replacing this emulation with interfaces that have been optimized for the virtual machine use-case: VirtIO.\r\n\r\nmicrovm.nix helps you building and running NixOS on different virtual machine managers. You can use it in different use-cases, for example as a more isolated alternative to nixos-container.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T17:55:00+02:00",
      "end": "2023-09-09T18:20:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "DDVFVZ",
    "speakers": [
      {
        "code": "VCLCZ8",
        "name": "Puck Meerburg",
        "biography": "Puck was tricked into trying NixOS six years ago and, instead of giving in to its ways, decided to double down. As a result, she is maybe the person most well-versed with the Nix interpreter's internals, contorting Nix in ways never seen before.",
        "avatar": "https://talks.nixcon.org/media/avatars/nontrans_transparent_MBU0Qag.png"
      }
    ],
    "title": "Reinventing the wheel with Zilch",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "It's been twenty years since Nix was unleashed upon this world, and yet, the only real alternative is Guix‽ Well, not on my watch! I've been working on Zilch for a while now, and it's starting to be ready to be released to the wild. This talk will describe what this fresh new Nix-compatible alternative is, how it came into being, and what the wider Nix community could learn from it.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T15:35:00+02:00",
      "end": "2023-09-09T16:00:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "BAVND7",
    "speakers": [
      {
        "code": "UVNJC9",
        "name": "Jade Lovelace",
        "biography": "Jade is a Computer Engineering student at the University of British Columbia in Vancouver, Canada. Their usual areas of focus are tooling, compilers, and operating systems.\r\n\r\nJade uses Nix and NixOS extensively, particularly for development environments and Haskell.\r\n\r\nTheir Web site can be found at https://jade.fyi",
        "avatar": null
      }
    ],
    "title": "Finding things in nixpkgs and NixOS source",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Even with recent improvements in documentation, sometimes the most expedient way to understand nixpkgs and NixOS is to read the source code. However, that's not trivial: there are now 2.9 million lines of Nix source in nixpkgs. This talk shows several methods of finding the sources behind things in nixpkgs and NixOS from using ctags to various lesser-known tricks in the repl.\r\n\r\nAfter this talk, getting around in nixpkgs should be familiar and quick.",
    "description": "There are a lot of tools and methods for getting documentation and finding things in Nix but they are often not well publicized and form peoples' private workflows. Substantial progress has been made on this, for instance, with nixd, but there are other methods that still have their place when more advanced tools don't have perfect code context. This talk introduces a novel NixOS-modules ctags implementation allowing finding option definitions nearly instantly. It also presents how to navigate nixpkgs using nix-doc for ctags and to get function documentation in the Nix repl, how to fall back on `unsafeGetAttrPos`, and how to use the Nix debugger.\r\n\r\nI will briefly dive into the internals of NixOS to show the introspection capabilities it provides for where settings come from, and how to load a NixOS configuration into the repl for inspection in the first place.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T10:15:00+02:00",
      "end": "2023-09-09T10:40:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "CQVAZU",
    "speakers": [
      {
        "code": "PRX9DE",
        "name": "Zach Mitchell",
        "biography": "Zach is an Engineer at flox, a member of the Nix Documentation Team, and the lead of the Learning Journey Working Group. Zach is pretty new to Nix, but has been writing Rust since 2018.\r\n\r\nIn a previous life Zach built lasers and did quantum mechanics simulations, but now he builds software with Rust and Nix. Zach has always had a knack for teaching, receiving multiple teaching awards during his PhD. This knack stems from an empathy for the struggles of new users of any technology. Enabling engineers and tinkerers alike to get things done or scratch their own itch has always been a joy for Zach.\r\n\r\nIn his free time Zach enjoys a good bike ride on either the road or a rocky mountain trail. He's also an avid disc golfer, an amateur whiskey sommelier, and a huge Dungeons & Dragons nerd.",
        "avatar": "https://talks.nixcon.org/media/avatars/IMG_6910_ukvy1kb.jpeg"
      }
    ],
    "title": "Rust + Nix: More than the sum of their parts?",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Rust is a programming language with a knack for ergonomics in a space where robustness, correctness, and speed often come at the cost of many papercuts. Nix is a project focused on building software in a robust, correct, and deterministic way. These two projects should be best friends, right? In this talk Zach Mitchell from flox and the Documentation Team will give an experience report writing Rust bindings for Nix. What makes bindings difficult? Which bindings can be autogenerated? Which can (or should) be written by hand? Tune in to find out what went well, what was painful, and what didn't work at all.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T11:50:00+02:00",
      "end": "2023-09-09T12:15:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "VPYBSY",
    "speakers": [
      {
        "code": "7ZPYSK",
        "name": "Linus Heckemann",
        "biography": "I discovered Nix and NixOS for myself in 2016, and quickly became convinced that this is the way I want to do all my computing.\r\n\r\nI joined the ranks of Nixpkgs contributors, and have been following the call of Nix in my career since graduating from university. Along the way, I've managed two NixOS releases, and I've been on the RFC\r\nSteering Committee since 2021.",
        "avatar": null
      }
    ],
    "title": "What Flakes needs (technically)",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Flakes is seeing widespread and increasing adoption, but some people and projects are still hesitant to move to them because they have requirements that are cumbersome or impossible to address with Nix Flakes in their current incarnation (there are also other reasons, but I will be focusing on the technical ones).\r\n\r\nI will talk about the gaps I see in the current design of Flakes, and how these gaps could be filled in the future without compromising the core goals of Flakes. I will also explore the implications that this will have for the broad range of projects already using Flakes as it exists today.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T11:25:00+02:00",
      "end": "2023-09-08T11:50:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "8QMELJ",
    "speakers": [
      {
        "code": "WEWDGG",
        "name": "Jörg Thalheim",
        "biography": "Ex-Systems-researcher and NixOS consultant working with Numtide. Maintainers of projects around nix including sops-nix, nixpkgs-review, nix-direnv, nix-update, nixos-shell, nixos-anywhere.",
        "avatar": "https://talks.nixcon.org/media/avatars/joerg-2022-square_ujXb0x3.jpeg"
      },
      {
        "code": "3YSM77",
        "name": "lassulus",
        "biography": "dude with a computer",
        "avatar": "https://talks.nixcon.org/media/avatars/avatar_dv8lh2R.jpg"
      }
    ],
    "title": "disko and nixos-anywhere: Declarative and Remote Installation of NixOS",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "If you ask three NixOS users what their favorite NixOS deployment tool to update a NixOS system is, you might get four answers. However, installing NixOS on a machine can be a tedious and manual process, especially if the machine is not physically accessible or does not have a NixOS installer. In this talk, we will introduce two tools that can simplify and automate the installation of NixOS on any machine with Linux and SSH access: disko and nixos-anywhere.",
    "description": "If you ask three NixOS users what their favorite NixOS deployment tool to update a NixOS system is, you might get four answers. However, installing NixOS on a machine can be a tedious and manual process, especially if the machine is not physically accessible or does not have a NixOS installer. In this talk, we will introduce two tools that can simplify and automate the installation of NixOS on any machine with Linux and SSH access: disko and nixos-anywhere.\r\n\r\nDisko is a declarative disk partitioning tool that allows you to specify the layout of your disks using a simple Nix expression. It can create, resize, format, and mount partitions on any device that supports block operations. It also supports encryption, ZFS, RAID, and LVM.\r\n\r\nNixos-anywhere is a tool that can install NixOS on any cloud or bare-metal environment over SSH. It can detect whether the target machine has a NixOS installer; if not, it can use kexec to boot into one. It then uses disko to partition and format the disks according to your configuration, and installs NixOS with your desired packages and secrets.\r\n\r\nWith these tools, you can easily deploy NixOS on any machine without needing physical access or manual intervention. You can also reuse the same configuration for multiple machines, ensuring consistency and reproducibility.\r\n\r\nIn this talk, we will demonstrate how to use disko and nixos-anywhere to install NixOS on various scenarios, such as a virtual machine, laptops or bare-metal servers. We will also discuss some of the challenges and limitations of these tools, and how they can be improved in the future.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T10:40:00+02:00",
      "end": "2023-09-09T11:05:00+02:00"
    },
    "image": "https://talks.nixcon.org/media/nixcon-2023/submissions/8QMELJ/logo_iLwMeDd.png",
    "resources": []
  },
  {
    "code": "MNUFFP",
    "speakers": [
      {
        "code": "XNPJJB",
        "name": "Martin Wimpress",
        "biography": "Husband 💍 Father 👨‍👩‍👧 Open source advocate ❤️‍🔥 Linux enthusiast 🐧 Podcaster 🎙 Streamer 📡 Making Nix easier at Determinate Systerms ❄ Leads Ubuntu MATE 🧉",
        "avatar": "https://talks.nixcon.org/media/avatars/wimpy-strong_SLA4pSf.png"
      }
    ],
    "title": "Blending NixOS with Flathub for friends and family",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Creating a NixOS workstation configuration for non-Linux experts using Flathub with a graphical storefront so they can install the apps they want.",
    "description": "Since 2006 I've been helping friends and family run desktop Linux. This lightning talk reflects on the distributions I've used in the past and why I'm now using NixOS with Flathub enabled to make NixOS accessible to non-expert Linux users.",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T14:25:00+02:00",
      "end": "2023-09-08T14:30:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "VN8YMP",
    "speakers": [
      {
        "code": "MBDEZX",
        "name": "Daniel Fullmer",
        "biography": "Daniel is a software engineer at Anduril, and leads the device operating systems team. He has been an Nix enthusiast and contributor since 2015.",
        "avatar": null
      }
    ],
    "title": "Automating testing of NixOS on physical machines",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "The NixOS virtual machine testing framework is very powerful, and allows for convenient testing of entire NixOS machines. However, some capabilities can only be tested by booting a physical machine with a given NixOS closure. This talk describes some work done toward the goal of enabling testing NixOS closures on physical machines, with an example of testing NVIDIA Jetson devices using the \"jetpack-nixos\" project.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": true,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T15:50:00+02:00",
      "end": "2023-09-08T16:15:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "SERXWP",
    "speakers": [
      {
        "code": "XLXTMM",
        "name": "Nitin Passa",
        "biography": "Hi, I'm Nitin! I'm currently working as a quantitative software engineer at  Two Sigma on the automated trading platform. Before that, I was at Cruise  Automation working on the planning stack for the autonomous vehicle. I love using NixOS to tinker and self-host software. NixOS tames otherwise unmanageable complexity and enables me to explore interests away from the keyboard.",
        "avatar": null
      }
    ],
    "title": "Single Website Firefox VMs with NixOS",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "In this lightening talk, we'll walk through process of creating a virtual machine using NixOS which will start Firefox and visit a pre-configured website. We'll work-around the performance issue of building multiple VMs when there are many configured websites. To do so, we'll employ flake outputs for caching and QEMU's ability to forward configuration options to the VM. At the end, we'll have a browser setup with improved isolation and alternative UX.",
    "description": "",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T14:30:00+02:00",
      "end": "2023-09-09T14:35:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "T3FZ8A",
    "speakers": [
      {
        "code": "U3WAC7",
        "name": "Sergei K",
        "biography": "Doctoral student at the Aalto University, working on image correspondences and, more generally, \"inverse [problems in] graphics\". Contributing to cudaPackages in nixpkgs",
        "avatar": "https://talks.nixcon.org/media/avatars/avatar-fallout.cleaned_VMwcNWW.jpg"
      }
    ],
    "title": "Nix for HPC: the case of cudaPackages",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "We should briefly see (or recap) what effort it takes today to provision via Nix a typical stack that includes Pytorch and CUDA, see when Nix could still be the better choice, and when Nix may seem to hinder progress. We should try to argue that the obstacles we observe can be eliminated at the nixpkgs level",
    "description": "Nixpkgs and NixOS go a long way in stabilising a program's inherently random build and runtime behaviour. Meanwhile the scientific computing software, and the state of the art \"AI\" research code in particular, heavily rely on dynamic and \"impure\" deployment techniques. These include e.g. dynamic linkage using \"dlopen\", unenforced assumptions about paths, distribution of pre-built black-box binaries, largely facilitated by the use of dependency solvers, and more. Sometimes these \"impurities\" are necessary, as when using driver-aware libraries like OpenGL or CUDA. This seemingly makes it cheaper to relax the requirements to reproducibility set by Nix and embrace tools such as pip, conda, singularity (apptainer) and docker. We should briefly see (or recap) what effort it takes today to provision via Nix a typical stack that includes Pytorch and CUDA, see when Nix could still be the better choice, and when Nix may seem to hinder progress. We should try to argue that the obstacles we observe can be eliminated at the nixpkgs level.\r\n\r\nP.S. This description is preliminary",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T14:20:00+02:00",
      "end": "2023-09-09T14:25:00+02:00"
    },
    "image": null,
    "resources": [
      {
        "resource": "https://nixos.org/community/teams/cuda",
        "description": "Description of the nixpgks CUDA maintainers team"
      }
    ]
  },
  {
    "code": "DDQRWQ",
    "speakers": [
      {
        "code": "C7WXKN",
        "name": "Alexander Sosedkin",
        "biography": "Currently a Quality Engineer at Red Hat, Crypto team.",
        "avatar": "https://talks.nixcon.org/media/avatars/sosedkin_czech_visa_photo_TUmfi8O.jpg"
      }
    ],
    "title": "Bootstrapping Nix and Linux from TinyCC",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Building every operating system starts from something. I'm not as hardcore as the stage0 project folks going from assembly to Guix, but a shorter path from a ~320 KB TinyCC binary to Nix to a proof-of-concept Linux distribution also proved to be a story worth telling.\r\n\r\nWe'll begin our journey by executing a -nostdlib C program with TinyCC, compile our way out towards a libc and a shell, work through older compilers to modern compilers and build Nix. Then we'll walk the same path again once over, but this time, we'll use Nix. Finally, in a different flake, we'll reimplement some of the founding nixpkgs patterns, work our way from toolchain to Linux and arrive at a bootable .iso. Corners will be cut, hacks will run amock, Nix will be both praised and complained about, reproducibility will be earned hard, and some patches will get upstreamed.",
    "description": "Links: https://github.com/ZilchOS/bootstrap-from-tcc, https://github.com/ZilchOS/core, http://bootstrappable.org",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T15:10:00+02:00",
      "end": "2023-09-09T15:35:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "Z897S3",
    "speakers": [
      {
        "code": "ZQX7LX",
        "name": "flokli",
        "biography": "Nix / DevOps tinkerer. Likes reproducible builds and declarative infrastructure.\r\n\r\nIn the NixOS community since 2017, going down way too many rabbit holes. Currently spending most of his time on Tvix, a Nix reimplementation in (mostly) Rust.",
        "avatar": "https://talks.nixcon.org/media/avatars/N_Coding_07122021_Tom_Brendt_FotoTB_27_lsdgyTV.jpg"
      }
    ],
    "title": "Tvix",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Tvix is a modern design and implementation of the Nix package manager (GPLv3). It brings a modular architecture in which components such as the build environment or package store are replaceable, which enables new use-cases and platforms.",
    "description": "This talk will give a status update on the current state of the project, and an outlook on the roadmap.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T16:00:00+02:00",
      "end": "2023-09-09T16:25:00+02:00"
    },
    "image": "https://talks.nixcon.org/media/nixcon-2023/submissions/Z897S3/tvix-logo_Mik6LEA.png",
    "resources": []
  },
  {
    "code": "CYEPCX",
    "speakers": [
      {
        "code": "RXFANU",
        "name": "Vladimir \"farcaller\" Pouzanov",
        "biography": "Vladimir is an SRE with passion for optimization. He witnessed many attempts to do the declarative configuration right, before and during the kubernetes craze. After getting convinced of the nixos benefits, he started to look into solving the production payload configuration with nix, too.",
        "avatar": "https://talks.nixcon.org/media/avatars/abc432bb0450574a25b15ff23d399d5a_Pp6jWhr.jpg"
      }
    ],
    "title": "Nix and Kubernetes: Deployments Done Right",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Nix is an amazing build tool not only for applications, but also for the infamous \"yaml engineering\". Join Volodymyr to learn about the journey of using nix along with argocd to deploy payloads into kubernetes.",
    "description": "What you will learn:\r\n- Setting up nix to work with argocd\r\n- Deploying simple applications written purely in nix\r\n- Utilizing the public helm charts in nix, with custom configuration and resource overriding without the chart forking\r\n- Using nixpkgs' modules system for complicated muti-cluster deployments",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T17:10:00+02:00",
      "end": "2023-09-09T17:35:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "KJCDMT",
    "speakers": [
      {
        "code": "9QXT9Y",
        "name": "Rok Garbas",
        "biography": "Rok is an Engineer at flox and a member of NixOS Marketing team.\r\n\r\nRok's journey started with many years of freelance work with Python and DevOps. Not being happy with the state of package management at the time, he found Nix in 2010 and has been a user, a contributor and an advocate since then.\r\n\r\nWherever he worked he put users first, either as a Release Engineer at Mozilla or as a consultant at Tweag. UX/DX became the language to \"talk\" to the users. Knowing that communicating the ideas is as important as having the technical skill is what makes Rok stand out. Understanding users and knowing how to talk to them is what brings a smile to Rok's face everyday.\r\n\r\nRok these days likes to tinker with Rust and is still excited when things work.",
        "avatar": "https://talks.nixcon.org/media/avatars/9124210529f6eb59754932c413dd3c69_gJ16GQ2.jpg"
      }
    ],
    "title": "How to teach Nix in 5 minutes!",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Congratulations, you’ve convinced your friends / peers / coworkers to give Nix a try. Now the hard work starts: you have to actually teach it to them! Nix might be hard to learn, but it sure can be a fun journey! In this talk, Rok Garbas from flox will share the tools and techniques you need to teach Nix to your friends and colleagues…and, most importantly, what NOT to teach.",
    "description": "Congratulations, you’ve convinced your friends / peers / coworkers to give Nix a try. Now the hard work starts: you have to actually teach it to them! Nix might be hard to learn, but it sure can be a fun journey! In this talk, Rok Garbas from flox will share the tools and techniques you need to teach Nix to your friends and colleagues…and, most importantly, what NOT to teach.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T17:30:00+02:00",
      "end": "2023-09-08T17:55:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "HRWDVC",
    "speakers": [
      {
        "code": "JFEHHQ",
        "name": "Silvan Mosberger",
        "biography": "Silvan is working at [Tweag](tweag.io/), where he can spend all his time for open-source Nix contributions. He specializes in Nixpkgs architecture, NixOS modules and state-of-the-art improvements.",
        "avatar": "https://talks.nixcon.org/media/avatars/cropped-more-prof_mwQnAbT.jpg"
      }
    ],
    "title": "not-all-packages-anymore.nix",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "For [almost 20 years now](https://github.com/nixos/nixpkgs/commit/1894a8b86c4f5233f4f28af3b93156aaaee44af1#diff-e55bb1f00549f56ee8b5e3a6977467543b29e7ddb51bd6df23bea76713fc972c), adding a new package to Nixpkgs required editing the `all-packages.nix` file, which grew to over 40000 barely-sorted lines this year. In addition, an appropriate place for your package definition had to be found in the loosely-categorised `pkgs` hierarchy. Especially with the recent growth of Nix, this has been a frequent cause of confusion for new contributors.\r\n\r\nHowever, in the months leading up to NixCon, this is all changing with the acceptance of [RFC 140](https://github.com/NixOS/rfcs/pull/140), originally designed by the new [Nixpkgs Architecture Team](https://nixos.org/community/teams/nixpkgs-architecture.html). This proposal allows most new packages to be added by simply creating a new directory in the right place with a name matching the desired attribute name.\r\n\r\nIn this talk I will go over the new package contribution process, along with its limitations, historical context, interesting implementation details and future work.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T11:50:00+02:00",
      "end": "2023-09-08T12:15:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "3FSNG9",
    "speakers": [
      {
        "code": "MBQ939",
        "name": "Ryan Mulligan",
        "biography": "ryantm has been using NixOS since 2015. In 2018, he made the r-ryantm which automatically opens thousands of pull requests to Nixpkgs every year. Ryan also created agenix for securing NixOS secrets and is a member of the Moderation Team focusing on organizing Discourse. Ryan is a software engineer at Replit helping them with developer experience and Nix.",
        "avatar": "https://talks.nixcon.org/media/avatars/ab7c8cd9bfc94ab2eae4a39e229a712e_VeogZMB.jpg"
      }
    ],
    "title": "Declaring an IDE with evalModules",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "The underlying machinery of the NixOS module system, evalModules, is useful for more than just declaring Operating Systems. At Replit, we use it to [declare IDE plugins](https://github.com/replit/nixmodules) for language runtimes, code intelligence (LSP), runners, packagers, and debuggers. Learn how you can use evalModules for your own applications and how we use it to declare an IDE. During the hackday, let's adapt the IDE plugins to emacs, vim, or vscode!",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T15:15:00+02:00",
      "end": "2023-09-08T15:40:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "G8NDHE",
    "speakers": [
      {
        "code": "A3BRRY",
        "name": "Valentin Gagarin",
        "biography": "While switching careers to software engineering after working in education, film making and graphics design, Valentin got into Nix and NixOS on his never-ending endeavor of making computers work reliably in the long run.\r\n\r\nHe is an active member of the Nix community as @fricklerhandwerk. Working for Tweag since 2022, he is currently involved with Nix maintenance with a focus on improving documentation. He also contracts for the NixOS Foundation, supporting projects funded through the Next Generation Internet program.",
        "avatar": "https://talks.nixcon.org/media/avatars/valentin.gagarin_4XWGa30.jpg"
      }
    ],
    "title": "This year in Nix documentation",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "A rundown of what the Nix documentation team has done since last NixCon",
    "description": "",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T14:40:00+02:00",
      "end": "2023-09-08T14:45:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "8XSCGH",
    "speakers": [
      {
        "code": "WNKTLV",
        "name": "Ron Efroni",
        "biography": null,
        "avatar": "https://talks.nixcon.org/media/avatars/1516962377063_1_HPUZpkL.jpg"
      },
      {
        "code": "CH7HAF",
        "name": "Eelco Dolstra",
        "biography": "Eelco Dolstra started the Nix project as a PhD student at Utrecht University. He currently works at Determinate Systems.",
        "avatar": "https://talks.nixcon.org/media/avatars/2e325a12c8976f6a704cd52048e68edd_pnciKCY.jpg"
      }
    ],
    "title": "Nix State of the Union 2023",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "Cover the dynamic landscape of Nix's growth, innovation, and future possibilities. This session will provide a comprehensive overview of the major milestones Nix has achieved over the past year, the challenges we've faced, and the exciting developments on the horizon.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T10:15:00+02:00",
      "end": "2023-09-08T10:39:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "8ENEKM",
    "speakers": [
      {
        "code": "ANNXAV",
        "name": "Ross Turk",
        "biography": "Ross Turk is head of marketing and devrel at flox. Ross brings more than 20 years of experience creating software, managing complex IT systems, and helping companies understand and serve developers.",
        "avatar": "https://talks.nixcon.org/media/avatars/ross_WkgLMUY.jpg"
      }
    ],
    "title": "Nix in the Wild",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "The team at flox has been producing a series of Nix in the Wild articles that showcase users and organizations doing innovative things with Nix. I’d like to take a quick few minutes to share some of these stories and invite others to participate.",
    "description": "",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T14:35:00+02:00",
      "end": "2023-09-09T14:40:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "LZ9QTZ",
    "speakers": [
      {
        "code": "GPNZBZ",
        "name": "Ron, Eelco, Domen, Théophane, Jonas",
        "biography": null,
        "avatar": null
      }
    ],
    "title": "NixOS Foundation Board Panel",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "An interactive session with the NixOS Foundation Board, going through the past year and looking into the next.",
    "description": "During this interactive session, board members will share their insights on the current state of Nix, discuss ongoing projects, and foundation plans for the upcoming year.\r\n\r\nIn addition to sharing the board's roadmap, this panel will also facilitate an open dialogue with the community in the form of Q&A.",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T14:50:00+02:00",
      "end": "2023-09-08T15:15:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "DHXKNW",
    "speakers": [
      {
        "code": "JFEHHQ",
        "name": "Silvan Mosberger",
        "biography": "Silvan is working at [Tweag](tweag.io/), where he can spend all his time for open-source Nix contributions. He specializes in Nixpkgs architecture, NixOS modules and state-of-the-art improvements.",
        "avatar": "https://talks.nixcon.org/media/avatars/cropped-more-prof_mwQnAbT.jpg"
      }
    ],
    "title": "The Nix Hour in 5 minutes",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "At the last NixCon, I [hosted](https://talks.nixcon.org/nixcon-2022/talk/G3DUDG/) the first Nix Hour in-person. Ever since then I've continued hosting the Nix Hour online almost every week, expecting to reach [over 40 sessions](https://www.youtube.com/playlist?list=PLyzwHTVJlRc8yjlx4VR4LU5A5O44og9in) before NixCon.\r\n\r\nIn this talk I'll give a brief explanation of what the Nix Hour is, how it went for the past year, and expectations for its future.",
    "description": "",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T14:40:00+02:00",
      "end": "2023-09-09T14:45:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "V3UGSG",
    "speakers": [
      {
        "code": "WPRAHG",
        "name": "Nick Bathum",
        "biography": "NixOS main since 2018\r\n\r\nbuilder, curious, disorganized, yak-shaver who hasn't learned enough maths yet\r\n\r\nThey're helping plastic injection moulders save time at [RJG Inc](https://rjginc.com/). While offline, they enjoy woodworking and being outside, preferably in the garden.",
        "avatar": "https://talks.nixcon.org/media/avatars/curve_tDaNBPD.png"
      }
    ],
    "title": "Adapting NixOS to fit local site constraints",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "This talk will describe our experience shipping a product as a NixOS appliance that supports site-specific customization after deployment.\r\n\r\nNixOS' declarative model is a good match when one can write down the complete system configuration. How can we handle dynamic aspects of the configuration? That is, anything we expect to vary such that we cannot specify it fully at build time.\r\n\r\nWe will share the mechanisms used to achieve this and our assessment of the trade-offs involved.",
    "description": "Examples of site-specific variations:\r\n* timezone\r\n* time server\r\n* network share\r\n* SSL/TLS certificate",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T14:20:00+02:00",
      "end": "2023-09-08T14:25:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "Q3YYMR",
    "speakers": [
      {
        "code": "UEAXU3",
        "name": "Sophie Tauchert",
        "biography": "IT-security engineer, admin for catgirl.cloud, running NixOS everywhere and maintaining a few NixOS packages.",
        "avatar": null
      }
    ],
    "title": "Daily-driving NixOS on the Librem 5",
    "submission_type": {
      "en": "Talk"
    },
    "submission_type_id": 2994,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "I've been using a Librem 5 running NixOS for a few months now as my daily driver. Here are the challenges I've faced, what works and what doesn't.",
    "description": "",
    "duration": 25,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T16:45:00+02:00",
      "end": "2023-09-09T17:10:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "GXW3EX",
    "speakers": [
      {
        "code": "LAUNRG",
        "name": "Ben Radford",
        "biography": "Ben is a software engineer at Tweag, where he spends his days working with Bazel and Nix.",
        "avatar": "https://talks.nixcon.org/media/avatars/profile-750x750_AiMKz5Y.jpg"
      }
    ],
    "title": "Layered Nix Stores",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "A new Nix store implementation — local-overlay — that lets you create a writable layer over another underlying store.",
    "description": "Nix has various different store implementations. For example the daemon store, which provides store access to unprivileged users on multiuser systems.\r\n\r\nSome caveats apply, but the new local-overlay store lets you combine an existing lower store with an upper layer, similar to the Linux Overlay Filesystem. Anything in the lower store will be accessible via the overlay store, while modifying the overlay store will only change the upper layer and leave the lower store untouched.",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-09T14:25:00+02:00",
      "end": "2023-09-09T14:30:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "TDYA9W",
    "speakers": [
      {
        "code": "WNKTLV",
        "name": "Ron Efroni",
        "biography": null,
        "avatar": "https://talks.nixcon.org/media/avatars/1516962377063_1_HPUZpkL.jpg"
      }
    ],
    "title": "NixCon Hiring Happy Hour",
    "submission_type": {
      "en": "Break Long"
    },
    "submission_type_id": 2992,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "A lightweight hiring happy hour. We will shout out all the companies and sponsors looking to hire Nix talent!",
    "description": "",
    "duration": 60,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T17:55:00+02:00",
      "end": "2023-09-08T18:55:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "7LPHTK",
    "speakers": [
      {
        "code": "G8YXUV",
        "name": "Théophane Hufschmitt",
        "biography": null,
        "avatar": "https://talks.nixcon.org/media/avatars/7226587_gnPsxGH.jpg"
      }
    ],
    "title": "Nix, but with a different frontend",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "This talk hints at how defining Nix packages (and development shells in particular) with another language than Nix influences the way we think about them, and discuss whether there are lessons to be learned from here for Nixpkgs or Nix itself.",
    "description": "[Organist](https://github.com/nickel-lang/organist) is a Nickel library and tool aimed at serving as the entry point for all the development tools, and featuring in particular a [Nickel](https://github.com/tweag/nickel) frontend for Nix as an experiment in changing the surface language.\r\nChanging the frontend used was also an occasion of changing the way we declare, compose and override packages, with a framework based on merging records (_a la_ module-system) rather than stacked wrapping functions and explicit fixpoints.",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T14:35:00+02:00",
      "end": "2023-09-08T14:40:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "QVCJ7Y",
    "speakers": [
      {
        "code": "XGGYJH",
        "name": "zimbatm",
        "biography": null,
        "avatar": null
      }
    ],
    "title": "NixOS Governance conversation (1st session)",
    "submission_type": {
      "en": "Workshop/Training - Select this if you are planning on running a training for attendees"
    },
    "submission_type_id": 3115,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "The question of how to more manage the project has come up once again. How do we structure ourselves to maximize participation, be effective and enjoy ourselves doing so?",
    "description": "",
    "duration": 60,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2421,
      "room": {
        "en": "Workshop room (Room 24)"
      },
      "start": "2023-09-08T13:30:00+02:00",
      "end": "2023-09-08T14:30:00+02:00"
    },
    "image": null,
    "resources": []
  },
  {
    "code": "7WYFPW",
    "speakers": [
      {
        "code": "3H9WGK",
        "name": "Yvan Sraka",
        "biography": "Yvan Sraka holds a master's degree in maths and computer sciences applied to biology from the Sorbonne University in Paris. Having discovered C++ programming as a child, he is involved in open-source communities. His previous commercial experience includes working in 3D Graphics and Runtime design with Rust, Nix, and Haskell. He used to teach Systems programming, Architecture, and DevOps to master's students and design algorithm competitions and kids/teens coding workshops (where he helps them build small video games). He lives in Belgium, loves biking, hiking, climbing, and vegan cooking.",
        "avatar": "https://talks.nixcon.org/media/avatars/a87bfca261ad0ccd8ddfda9ca3bf508a_2QLVVn6.jpg"
      }
    ],
    "title": "Compiling to Nix: A Quick Overview",
    "submission_type": {
      "en": "Lightning talk"
    },
    "submission_type_id": 2995,
    "track": null,
    "track_id": null,
    "state": "confirmed",
    "abstract": "What are the languages that target Nix? Why might someone choose not to write an expression directly in Nix? How do these languages differ from one another?",
    "description": "This lightning talk will offer a brief overview of languages that can compile to Nix. For instance, [Dhall](https://dhall-lang.org/), [PureScript](https://hackage.haskell.org/package/purenix) and [Nickel](https://nickel-lang.org/) (even though it doesn't directly translate to Nix). What do the generated expressions look like? Can I use them to write a package definition or a NixOS configuration?\r\n\r\n**EDIT:** I will not have the time to introduce an experimental toy project of mine: a Scheme dialect that compiles to Nix, featuring a _static_ type system inspired by the [contracts](https://github.com/yvan-sraka/contracts) library. But I will be more than happy to discuss it while HackDay!",
    "duration": 5,
    "slot_count": 1,
    "do_not_record": false,
    "is_featured": false,
    "content_locale": "en",
    "slot": {
      "room_id": 2420,
      "room": {
        "en": "Lecture hall (Room 122)"
      },
      "start": "2023-09-08T14:30:00+02:00",
      "end": "2023-09-08T14:35:00+02:00"
    },
    "image": null,
    "resources": []
  }
]